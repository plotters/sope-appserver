#
#   config.make.in
#
#   All of the settings required by the makefile package
#   that are determined by configure.
#
#   Copyright (C) 1997 Free Software Foundation, Inc.
#
#   Author:  Scott Christley <scottc@net-community.com>
#   Author:  Ovidiu Predescu <ovidiu@net-community.com>
#
#   This file is part of the GNUstep Makefile Package.
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#   
#   You should have received a copy of the GNU General Public
#   License along with this library; see the file COPYING.LIB.
#   If not, write to the Free Software Foundation,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# The GNUstep Make Package Version
#
GNUSTEP_MAKE_MAJOR_VERSION=@GNUSTEP_MAKE_MAJOR_VERSION@
GNUSTEP_MAKE_MINOR_VERSION=@GNUSTEP_MAKE_MINOR_VERSION@
GNUSTEP_MAKE_SUBMINOR_VERSION=@GNUSTEP_MAKE_SUBMINOR_VERSION@
GNUSTEP_MAKE_VERSION=@GNUSTEP_MAKE_VERSION@

#
# Binary and compile tools
#
CC       = @CC@
OPTFLAG  = @CFLAGS@
OBJCFLAGS= @OBJCFLAGS@
CPPFLAGS = @CPPFLAGS@
CPP      = @CPP@

EXEEXT = @EXEEXT@
OEXT   = .@OBJEXT@
LIBEXT = .a

LN_S = @LN_S@

# This is the best we can do given the current autoconf, which only
# returns LN_S
ifeq ($(LN_S), ln -s)
  HAS_LN_S = yes
else
  HAS_LN_S = no
endif

# Special case - on mingw32, autoconf sets LN_S to 'ln -s', but then
# that does a recursive copy (ie, cp -r).
ifeq (@target_os@,mingw32)
  HAS_LN_S = no
endif

# This is used to remove an existing symlink before creating a new
# one.  We don't trust 'ln -s -f' as it's unportable so we remove
# manually the existing symlink (if any) before creating a new one.
# If symlinks are supported on the platform, RM_LN_S is just 'rm -f';
# if they are not, we assume they are copies (like cp -r) and we go
# heavy-handed with 'rm -Rf'.  Note - this code might need rechecking
# for the case where LN_S = 'ln', if that ever happens on some
# platforms.
ifeq ($(HAS_LN_S), yes)
  RM_LN_S = rm -f
  FRAMEWORK_VERSION_SUPPORT = yes
else
  RM_LN_S = rm -Rf
  FRAMEWORK_VERSION_SUPPORT = no
endif

LD = $(CC)
LDOUT =
LDFLAGS = @LDFLAGS@ 

AR      = @AR@
AROUT   =
ARFLAGS = rc
RANLIB  = @RANLIB@

DLLTOOL = @DLLTOOL@

# NB: These variables are defined here only so that they can be
# overridden on the command line (so you can type 'AWK=mawk make' to
# use a different awk for that particular run of make).  We should
# *NOT* set them to the full path of these tools at configure time,
# because otherwise when you change/update the tools you would need to
# reconfigure and reinstall gnustep-make!  We can normally assume that
# typing 'awk' and 'sed' on the command line cause the preferred awk
# and sed programs on the system to be used.  Hardcoding the full path
# (or the name) of the specific awk or sed program on this sytem here
# would make it lot more inflexible.  In other words, the following
# definitions should remain like in 'AWK = awk' on all systems.
AWK             = awk
SED             = sed
YACC            = yacc
BISON           = bison
FLEX            = flex
LEX             = lex
CHOWN           = chown
STRIP           = strip

INSTALL		= @HOST_INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
TAR		= @TAR@
MKDIRS		= $(GNUSTEP_MAKEFILES)/mkinstalldirs

# Darwin specific flags
CC_CPPPRECOMP  = @cc_cppprecomp@
CC_BUNDLE      = @cc_bundle@

# The default library combination
default_library_combo = @ac_cv_library_combo@

# Backend bundle
BACKEND_BUNDLE=@BACKEND_BUNDLE@

#
# Do threading stuff.
#
# Warning - the base library's configure.in will extract the thread
# flags from the following line using grep/sed - so if you change the
# following lines you *need* to update the base library configure.in
# too.
#
ifndef objc_threaded
  objc_threaded:=@objc_threaded@
endif

# Any user specified libs
CONFIG_SYSTEM_INCL=@INCLUDES@
CONFIG_SYSTEM_LIBS = @LIBS@
CONFIG_SYSTEM_LIB_DIR = @LIB_DIR@

#
# Whether the C/ObjC/C++ compiler supports auto-dependencies
# (generating dependencies of the object files from the include files
# used to compile them) via -MMD -MP flags
#
AUTO_DEPENDENCIES = @AUTO_DEPENDENCIES@

#
# Whether the ObjC compiler supports precompiling headers.
#
PRECOMPILED_HEADERS = @PRECOMPILED_HEADERS@

#
# Whether the ObjC compiler supports native ObjC exceptions via
# @try/@catch/@finally/@throw.
#
USE_OBJC_EXCEPTIONS = @USE_OBJC_EXCEPTIONS@
